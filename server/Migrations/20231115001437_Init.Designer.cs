// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Context;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(OfficeDbContext))]
    [Migration("20231115001437_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("server.Models.Domain.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookingDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SeatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SeatId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SeatId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookingDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SeatId = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("server.Models.Domain.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("server.Models.Domain.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OfficeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "stor rom"
                        },
                        new
                        {
                            Id = 2,
                            Name = "liten rom"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mellonstor rom"
                        });
                });

            modelBuilder.Entity("server.Models.Domain.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 3,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 4,
                            RoomId = 3
                        });
                });

            modelBuilder.Entity("server.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "abcReading@gmail.com",
                            Name = "Soniauser Reading",
                            PhoneNumber = "12344321"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Reading@gmail.com",
                            Name = "Dick Johnson",
                            PhoneNumber = "900944321"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Johnson@gmail.com",
                            Name = "Johnson Johnson",
                            PhoneNumber = "900456321"
                        },
                        new
                        {
                            Id = 4,
                            Email = "vicky.huangyuanxin@omegapoint.no",
                            Name = "vicky Yuanxin Huang",
                            PhoneNumber = "900456321"
                        });
                });

            modelBuilder.Entity("server.Models.Domain.Booking", b =>
                {
                    b.HasOne("server.Models.Domain.Seat", "Seat")
                        .WithMany("Bookings")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Domain.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Domain.Room", b =>
                {
                    b.HasOne("server.Models.Domain.Office", "Office")
                        .WithMany("Rooms")
                        .HasForeignKey("OfficeId");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("server.Models.Domain.Seat", b =>
                {
                    b.HasOne("server.Models.Domain.Room", "Room")
                        .WithMany("Seats")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("server.Models.Domain.Office", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("server.Models.Domain.Room", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("server.Models.Domain.Seat", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("server.Models.Domain.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
